{"ast":null,"code":"var _jsxFileName = \"D:\\\\work\\\\react_login\\\\office\\\\src\\\\components\\\\Register.js\";\nimport React, { Component } from \"react\";\nimport CustomInput from \"./common/textinput\";\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.handleBlur = (e, validations) => {\n      const errorMsgs = this.state.errors;\n      const fieldValue = e.target.value,\n            fieldName = e.target.name;\n\n      if (!fieldValue.trim()) {\n        errorMsgs[fieldName] = \"cant be empty\";\n        this.setState({\n          errors: errorMsgs\n        });\n        return;\n      }\n\n      validations.reverse().forEach(validation => {\n        const type = validation.type,\n              value = validation.value,\n              error = validation.error;\n\n        if (type === \"regex\" && !fieldValue.match(value)) {\n          errorMsgs[fieldName] = \"invalid \".concat(fieldName, \", \").concat(error);\n        } else if (type === \"minLength\" && fieldValue.length < value) {\n          errorMsgs[fieldName] = \"\".concat(fieldName, \" should have atleast \").concat(value, \" characters\");\n        } else {\n          errorMsgs[fieldName] = \"\";\n        }\n      });\n      this.setState({\n        errors: errorMsgs\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n\n      if (!this.state.fname && this.state.lname && this.state.email && this.state.lname) {} else {}\n    };\n\n    this.state = {\n      fname: \"\",\n      lname: \"\",\n      email: \"\",\n      password1: \"\",\n      password2: \"\",\n      errors: {}\n    };\n  } //validation\n  // handleValidation = fieldName => {\n  //   const { fname, lname, email, password1, password2 } = this.state;\n  //   const errors = this.state.errors;\n  //   var isValid = true;\n  //   if (!fname) {\n  //     isValid = false;\n  //     errors.fname = \"cannont be empty\";\n  //   } else if (fname) {\n  //     if (!fname.match(/^[a-zA-Z]+$/)) {\n  //       isValid = false;\n  //       errors.fname = \"Letters only\";\n  //     }\n  //   }\n  //   if (!lname) {\n  //     isValid = false;\n  //     errors.lname = \"cannont be empty\";\n  //   } else if (lname) {\n  //     if (!lname.match(/^[a-zA-Z]+$/)) {\n  //       isValid = false;\n  //       errors.lname = \"Letters only\";\n  //     }\n  //   }\n  //   if (!email) {\n  //     isValid = false;\n  //     errors.email = \"cannont be empty\";\n  //   } else if (email) {\n  //     if (!email.match(/\\S+@\\S+\\.\\S+/)) {\n  //       isValid = false;\n  //       errors.email = \"Invalid Email\";\n  //     }\n  //   }\n  //   if (!password1) {\n  //     isValid = false;\n  //     errors.pass = \"cannont be empty\";\n  //   } else if (password1) {\n  //     if (!password1.match(/^[a-zA-Z0-9]+$/)) {\n  //       isValid = false;\n  //       errors.password1 = \"Special charcters not allowed\";\n  //     } else if (password1 !== password2) {\n  //       isValid = false;\n  //       errors.pass = \"credentials not matched\";\n  //     }\n  //   }\n  //   this.setState({ errors: errors });\n  //   return isValid;\n  // };\n\n\n  render() {\n    return React.createElement(\"div\", {\n      style: {\n        margin: \"60px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(CustomInput, {\n      handleBlur: this.handleBlur,\n      validations: [{\n        type: \"regex\",\n        value: /^[a-zA-Z]+$/,\n        error: \"Characters only\"\n      }],\n      onChange: this.handleChange,\n      id: \"fname\",\n      name: \"fname\",\n      placeholder: \"First Name\",\n      type: \"text\",\n      className: \"form-control\",\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(CustomInput, {\n      handleBlur: this.handleBlur,\n      validations: [{\n        type: \"regex\",\n        value: /^[a-zA-Z]+$/,\n        error: \"Characters only\"\n      }],\n      onChange: this.handleChange,\n      id: \"lname\",\n      name: \"lname\",\n      placeholder: \"Last Name\",\n      type: \"email\",\n      className: \"form-control\",\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(CustomInput, {\n      handleBlur: this.handleBlur,\n      validations: [{\n        type: \"regex\",\n        value: /\\S+@\\S+\\.\\S+/,\n        error: \"email is incorrecrt\"\n      }],\n      onChange: this.handleChange,\n      id: \"email\",\n      name: \"email\",\n      placeholder: \"Email\",\n      type: \"email\",\n      className: \"form-control\",\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(CustomInput, {\n      handleBlur: this.handleBlur,\n      validations: [{\n        type: \"minLength\",\n        value: 8\n      }],\n      onChange: this.handleChange,\n      id: \"password1\",\n      name: \"password1\",\n      placeholder: \"Password\",\n      type: \"password\",\n      className: \"form-control\",\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(CustomInput, {\n      handleBlur: this.handleBlur,\n      validations: [{\n        type: \"minLength\",\n        value: 8\n      }],\n      onChange: this.handleChange,\n      id: \"password2\",\n      name: \"password2\",\n      placeholder: \"Repeat Password\",\n      type: \"password\",\n      className: \"form-control\",\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"form-group row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"offset-4 col-8\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      name: \"submit\",\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Submit\")))));\n  }\n\n}","map":{"version":3,"sources":["D:/work/react_login/office/src/components/Register.js"],"names":["React","Component","CustomInput","Register","constructor","props","handleChange","e","setState","target","name","value","handleBlur","validations","errorMsgs","state","errors","fieldValue","fieldName","trim","reverse","forEach","validation","type","error","match","length","handleSubmit","preventDefault","fname","lname","email","password1","password2","render","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport CustomInput from \"./common/textinput\";\r\nexport default class Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fname: \"\",\r\n      lname: \"\",\r\n      email: \"\",\r\n      password1: \"\",\r\n      password2: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n\r\n  //validation\r\n  // handleValidation = fieldName => {\r\n  //   const { fname, lname, email, password1, password2 } = this.state;\r\n  //   const errors = this.state.errors;\r\n  //   var isValid = true;\r\n\r\n  //   if (!fname) {\r\n  //     isValid = false;\r\n  //     errors.fname = \"cannont be empty\";\r\n  //   } else if (fname) {\r\n  //     if (!fname.match(/^[a-zA-Z]+$/)) {\r\n  //       isValid = false;\r\n  //       errors.fname = \"Letters only\";\r\n  //     }\r\n  //   }\r\n  //   if (!lname) {\r\n  //     isValid = false;\r\n  //     errors.lname = \"cannont be empty\";\r\n  //   } else if (lname) {\r\n  //     if (!lname.match(/^[a-zA-Z]+$/)) {\r\n  //       isValid = false;\r\n  //       errors.lname = \"Letters only\";\r\n  //     }\r\n  //   }\r\n  //   if (!email) {\r\n  //     isValid = false;\r\n  //     errors.email = \"cannont be empty\";\r\n  //   } else if (email) {\r\n  //     if (!email.match(/\\S+@\\S+\\.\\S+/)) {\r\n  //       isValid = false;\r\n  //       errors.email = \"Invalid Email\";\r\n  //     }\r\n  //   }\r\n  //   if (!password1) {\r\n  //     isValid = false;\r\n  //     errors.pass = \"cannont be empty\";\r\n  //   } else if (password1) {\r\n  //     if (!password1.match(/^[a-zA-Z0-9]+$/)) {\r\n  //       isValid = false;\r\n  //       errors.password1 = \"Special charcters not allowed\";\r\n  //     } else if (password1 !== password2) {\r\n  //       isValid = false;\r\n  //       errors.pass = \"credentials not matched\";\r\n  //     }\r\n  //   }\r\n\r\n  //   this.setState({ errors: errors });\r\n  //   return isValid;\r\n  // };\r\n\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleBlur = (e, validations) => {\r\n    const errorMsgs = this.state.errors;\r\n    const fieldValue = e.target.value,\r\n      fieldName = e.target.name;\r\n    if (!fieldValue.trim()) {\r\n      errorMsgs[fieldName] = \"cant be empty\";\r\n      this.setState({ errors: errorMsgs });\r\n      return;\r\n    }\r\n    validations.reverse().forEach(validation => {\r\n      const { type, value, error } = validation;\r\n      if (type === \"regex\" && !fieldValue.match(value)) {\r\n        errorMsgs[fieldName] = `invalid ${fieldName}, ${error}`;\r\n      } else if (type === \"minLength\" && fieldValue.length < value) {\r\n        errorMsgs[\r\n          fieldName\r\n        ] = `${fieldName} should have atleast ${value} characters`;\r\n      } else {\r\n        errorMsgs[fieldName] = ``;\r\n      }\r\n    });\r\n    this.setState({ errors: errorMsgs });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n  if (!this.state.fname && this.state.lname && this.state.email && this.state.lname) {\r\n    \r\n  } else {\r\n    \r\n  }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ margin: \"60px\" }}>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <CustomInput\r\n            handleBlur={this.handleBlur}\r\n            validations={[\r\n              { type: \"regex\", value: /^[a-zA-Z]+$/, error: \"Characters only\" }\r\n            ]}\r\n            onChange={this.handleChange}\r\n            id=\"fname\"\r\n            name=\"fname\"\r\n            placeholder=\"First Name\"\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            errors={this.state.errors}\r\n          />\r\n          <CustomInput\r\n            handleBlur={this.handleBlur}\r\n            validations={[\r\n              { type: \"regex\", value: /^[a-zA-Z]+$/, error: \"Characters only\" }\r\n            ]}\r\n            onChange={this.handleChange}\r\n            id=\"lname\"\r\n            name=\"lname\"\r\n            placeholder=\"Last Name\"\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            errors={this.state.errors}\r\n          />\r\n          <CustomInput\r\n            handleBlur={this.handleBlur}\r\n            validations={[\r\n              {\r\n                type: \"regex\",\r\n                value: /\\S+@\\S+\\.\\S+/,\r\n                error: \"email is incorrecrt\"\r\n              }\r\n            ]}\r\n            onChange={this.handleChange}\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            errors={this.state.errors}\r\n          />\r\n          <CustomInput\r\n            handleBlur={this.handleBlur}\r\n            validations={[\r\n              {\r\n                type: \"minLength\",\r\n                value: 8\r\n              }\r\n            ]}\r\n            onChange={this.handleChange}\r\n            id=\"password1\"\r\n            name=\"password1\"\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            errors={this.state.errors}\r\n          />\r\n          <CustomInput\r\n            handleBlur={this.handleBlur}\r\n            validations={[\r\n              {\r\n                type: \"minLength\",\r\n                value: 8\r\n              }\r\n            ]}\r\n            onChange={this.handleChange}\r\n            id=\"password2\"\r\n            name=\"password2\"\r\n            placeholder=\"Repeat Password\"\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            errors={this.state.errors}\r\n          />\r\n          <div className=\"form-group row\">\r\n            <div className=\"offset-4 col-8\">\r\n              <button name=\"submit\" type=\"submit\" className=\"btn btn-primary\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}